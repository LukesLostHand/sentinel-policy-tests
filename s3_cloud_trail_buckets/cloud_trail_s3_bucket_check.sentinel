import "tfplan/v2" as tfplan



#### Gathering CloudTrail resources #### 

aws_cloud_trails = filter tfplan.resources as _, resource_changes {
  resource_changes.type is "aws_cloudtrail"
}

// getting the map keys for the cloudtrail resources
aws_cloud_trail_keys = keys(aws_cloud_trails) 

// this is verifying cloudtrail attributes 
#print(aws_cloud_trails[aws_cloud_trail_keys[0]].config.s3_bucket_name.references[0])

// creating the cloudtrail bucket list and then adding the s3 bucket reference to the list
cloud_trail_buckets = []
for aws_cloud_trail_keys as name {
  append(cloud_trail_buckets, aws_cloud_trails[name].config.s3_bucket_name.references[1])
}

// pring the buckets of the cloudtrails 
print(cloud_trail_buckets)

####  Gathering S3 buckets #### 
// this code will check the the acls of the identified buckets and put them in a list
aws_s3_buckets = filter tfplan.resources as _, resource_changes {
  resource_changes.type is "aws_s3_bucket"
}
// verifying s3 attributes: 
//print("Bucket ACLs:", aws_s3_buckets[cloud_trail_buckets[0]].config.acl.constant_value)

s3_bucket_acls = []

for cloud_trail_buckets as buckets {
  append(s3_bucket_acls, aws_s3_buckets[buckets].config.acl.constant_value)
}
// verifying acls
print("CloudTrail bucket ACLS:", s3_bucket_acls)  

// this rule will fail if a "public-read" is found in the list 
main = rule { s3_bucket_acls not contains "public-read" } 
